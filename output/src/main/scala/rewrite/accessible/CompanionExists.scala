package rewrite.accessible

import zio._


trait ServiceCompanionExists {
  def get(key: String): UIO[Int]
}

object ServiceCompanionExists {
  def default: ServiceCompanionExists = ???

  // format: off
  // Generated by ZIO Accessible CodeGen Scalafix Rule
  def get(key: String)(using izumi.reflect.Tag[ServiceCompanionExists]): ZIO[ServiceCompanionExists, Nothing, Int] = ZIO.serviceWithZIO[ServiceCompanionExists](_.get(key))
  // format: on
}


trait ServiceEmptyCompanion {
  def get(key: String): UIO[Int]
}

object ServiceEmptyCompanion {

  // format: off
  // Generated by ZIO Accessible CodeGen Scalafix Rule
  def get(key: String)(using izumi.reflect.Tag[ServiceEmptyCompanion]): ZIO[ServiceEmptyCompanion, Nothing, Int] = ZIO.serviceWithZIO[ServiceEmptyCompanion](_.get(key))
  // format: on
}


trait ServiceEmptyCompanion2 {
  def get(key: String): UIO[Int]
}

object ServiceEmptyCompanion2 {

  // format: off
  // Generated by ZIO Accessible CodeGen Scalafix Rule
  def get(key: String)(using izumi.reflect.Tag[ServiceEmptyCompanion2]): ZIO[ServiceEmptyCompanion2, Nothing, Int] = ZIO.serviceWithZIO[ServiceEmptyCompanion2](_.get(key))
  // format: on
}

object TestCompanionExists {
  val get1: ZIO[ServiceCompanionExists with Any, Nothing, Int] = ServiceCompanionExists.get("foo")
  val get2: ZIO[ServiceEmptyCompanion with Any, Nothing, Int] = ServiceEmptyCompanion.get("foo")
  val get3: ZIO[ServiceEmptyCompanion2 with Any, Nothing, Int] = ServiceEmptyCompanion2.get("foo")
}
