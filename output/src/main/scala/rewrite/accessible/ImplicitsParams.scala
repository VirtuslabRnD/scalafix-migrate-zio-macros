package rewrite.accessible

import zio._
import zio.stream.ZSink

case class GroupId(v: Int)
trait TransactionEvent


trait ImplicitsParamsService {
  def reduceTransactions[R: Tag, E: Tag, A: Tag](groupId: GroupId, sink: ZSink[R, E, TransactionEvent, Nothing, A]): ZIO[R, E, A]
  def eventsForGroup(id: GroupId)(implicit tag: Tag[GroupId]): List[TransactionEvent]
}

object ImplicitsParamsService {

  // format: off
  // Generated by ZIO Accessible CodeGen Scalafix Rule
  def reduceTransactions[R: Tag, E: Tag, A: Tag](groupId: GroupId, sink: ZSink[R, E, TransactionEvent, Nothing, A])(using izumi.reflect.Tag[ImplicitsParamsService]): ZIO[ImplicitsParamsService & R, E, A] = ZIO.serviceWithZIO[ImplicitsParamsService](_.reduceTransactions[R, E, A](groupId, sink))
  def eventsForGroup(id: GroupId)(using Tag[GroupId])(using izumi.reflect.Tag[ImplicitsParamsService]): ZIO[ImplicitsParamsService, Nothing, List[TransactionEvent]] = ZIO.serviceWith[ImplicitsParamsService](_.eventsForGroup(id))
  // format: on
}

object ImplicitsParamsServiceTest {
  def sink: ZSink[Any, Nothing, TransactionEvent, Nothing, Unit] = ???
  val reduceTransactions: ZIO[ImplicitsParamsService, Nothing, Unit] = ImplicitsParamsService.reduceTransactions(GroupId(42), sink)
  val eventsForGroup: ZIO[ImplicitsParamsService, Nothing, List[TransactionEvent]] = ImplicitsParamsService.eventsForGroup(GroupId(42))
}
