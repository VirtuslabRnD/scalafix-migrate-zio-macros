package rewrite.mockable

import zio._
import zio.stream.ZSink
import zio.mock._
import rewrite.accessible._
import zio.mock.Mock


object ImplicitsParamsServiceMock extends Mock[ImplicitsParamsService] {
  // format: off
  // Generated by ZIO Mockable CodeGen Scalafix Rule
  case object ReduceTransactions extends Poly.Effect.InputErrorOutput
  case object EventsForGroup extends Method[GroupId, Throwable, List[TransactionEvent]]
  override val compose: URLayer[Proxy, ImplicitsParamsService] = ZLayer.fromZIO[Proxy, Nothing, ImplicitsParamsService](
    ZIO.service[Proxy].flatMap { proxy =>
      withRuntime[Proxy, ImplicitsParamsService] { rt =>
        class MockImpl extends ImplicitsParamsService {
          final override def reduceTransactions[R, E, A](groupId: GroupId, sink: ZSink[R, E, TransactionEvent, Nothing, A])(using Tag[R], Tag[E], Tag[A]): ZIO[R, E, A] = proxy(ReduceTransactions.of[(GroupId, ZSink[R, E, TransactionEvent, Nothing, A]), E, A], groupId, sink)
          final override def eventsForGroup(id: GroupId)(using Tag[GroupId]): List[TransactionEvent] = Unsafe.unsafe { case given Unsafe => rt.unsafe.run(proxy(EventsForGroup, id)).getOrThrow() }
        }
        ZIO.succeed(new MockImpl())
  }})
  // format: on
}

object ImplicitsParamsServiceMockTest {
  implicitly[ImplicitsParamsServiceMock.type <:< Mock[ImplicitsParamsService]]
  implicitly[ImplicitsParamsServiceMock.ReduceTransactions.type <:< ImplicitsParamsServiceMock.Poly.Effect.InputErrorOutput]
  implicitly[
    ImplicitsParamsServiceMock.EventsForGroup.type <:< ImplicitsParamsServiceMock.Method[GroupId, Throwable, List[TransactionEvent]]
  ]
}
