package rewrite.mockable

import zio._
import zio.stream._
import zio.mock.Mock

object ZStreams {
  type StreamDefsModule = StreamDefsModule.Service
  object StreamDefsModule {
    trait Service {
      val static: ZStream[Any, String, String]
      def zeroParams: ZStream[Any, String, String]
      def zeroParamsWithParens(): ZStream[Any, String, String]
      def singleParam(a: Int): ZStream[Any, String, String]
      def manyParams(a: Int, b: String, c: Long): ZStream[Any, String, String]
      def manyParamLists(a: Int)(b: String)(c: Long): ZStream[Any, String, String]
    }
  }
}


object ZStreamsMock extends Mock[ZStreams.StreamDefsModule.Service] {
  // format: off
  // Generated by ZIO Mockable CodeGen Scalafix Rule
  case object Static extends Stream[Unit, String, String]
  case object ZeroParams extends Stream[Unit, String, String]
  case object ZeroParamsWithParens extends Stream[Unit, String, String]
  case object SingleParam extends Stream[Int, String, String]
  case object ManyParams extends Stream[(Int, String, Long), String, String]
  case object ManyParamLists extends Stream[(Int, String, Long), String, String]
  override val compose: URLayer[mock.Proxy, ZStreams.StreamDefsModule.Service] = ZLayer.fromZIO[mock.Proxy, Nothing, ZStreams.StreamDefsModule.Service](
    ZIO.service[mock.Proxy].flatMap { proxy =>
      withRuntime[mock.Proxy, ZStreams.StreamDefsModule.Service] { rt =>
        class MockImpl extends ZStreams.StreamDefsModule.Service {
          final override val static: ZStream[Any, String, String] = Unsafe.unsafe { case given Unsafe => rt.unsafe.run(proxy(Static)).getOrThrowFiberFailure() }
          final override def zeroParams: ZStream[Any, String, String] = Unsafe.unsafe { case given Unsafe => rt.unsafe.run(proxy(ZeroParams)).getOrThrowFiberFailure() }
          final override def zeroParamsWithParens(): ZStream[Any, String, String] = Unsafe.unsafe { case given Unsafe => rt.unsafe.run(proxy(ZeroParamsWithParens)).getOrThrowFiberFailure() }
          final override def singleParam(a: Int): ZStream[Any, String, String] = Unsafe.unsafe { case given Unsafe => rt.unsafe.run(proxy(SingleParam, a)).getOrThrowFiberFailure() }
          final override def manyParams(a: Int, b: String, c: Long): ZStream[Any, String, String] = Unsafe.unsafe { case given Unsafe => rt.unsafe.run(proxy(ManyParams, a, b, c)).getOrThrowFiberFailure() }
          final override def manyParamLists(a: Int)(b: String)(c: Long): ZStream[Any, String, String] = Unsafe.unsafe { case given Unsafe => rt.unsafe.run(proxy(ManyParamLists, a, b, c)).getOrThrowFiberFailure() }
        }
        ZIO.succeed(new MockImpl())
  }})
  // format: on
}

object TestZStreams {
  import ZStreams.StreamDefsModule.Service
  implicitly[ZStreamsMock.type <:< Mock[Service]]
  implicitly[ZStreamsMock.Static.type <:< ZStreamsMock.Stream[Unit, String, String]]
  implicitly[ZStreamsMock.ZeroParams.type <:< ZStreamsMock.Stream[Unit, String, String]]
  implicitly[ZStreamsMock.ZeroParamsWithParens.type <:< ZStreamsMock.Stream[Unit, String, String]]
  implicitly[ZStreamsMock.SingleParam.type <:< ZStreamsMock.Stream[Int, String, String]]
  implicitly[ZStreamsMock.ManyParams.type <:< ZStreamsMock.Stream[(Int, String, Long), String, String]]
  implicitly[ZStreamsMock.ManyParamLists.type <:< ZStreamsMock.Stream[(Int, String, Long), String, String]]
}
