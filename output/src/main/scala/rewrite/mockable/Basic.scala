package rewrite.mockable

import zio._
import zio.mock.Mock

trait Foo { val value: String }
case class Bar(value: String) extends Foo
case class Wrapped[T](value: T)

trait Service {
  def get(key: String): UIO[Int]
  def set(key: String, value: Int): UIO[Unit]
  def reset: UIO[Unit]
  def io: IO[String, Long]
  def task: Task[Long]
  def uio: UIO[Long]
  def urio: URIO[String, Long]
  def poly1[A: EnvironmentTag](a: A): UIO[Unit]
  def poly2[A: EnvironmentTag]: IO[A, Unit]
  def poly3[A: EnvironmentTag]: UIO[A]
  def poly4[A: EnvironmentTag, B: EnvironmentTag](a: A): IO[B, Unit]
  def poly5[A: EnvironmentTag, B: EnvironmentTag](a: A): IO[Unit, B]
  def poly6[A: EnvironmentTag, B: EnvironmentTag]: IO[A, B]
  def poly7[A: EnvironmentTag, B: EnvironmentTag, C: EnvironmentTag](a: A): IO[B, C]
  def poly8[A: EnvironmentTag]: UIO[(A, String)]
  def poly9[A <: Foo: EnvironmentTag]: UIO[A]
  def poly10[A: EnvironmentTag](a: Wrapped[A]): UIO[A]
}

trait ServiceCompanion

object ServiceMock extends Mock[Service] with ServiceCompanion {
  val foo = 42
  // format: off
  // Generated by ZIO Mockable CodeGen Scalafix Rule
  case object Get extends Effect[String, Nothing, Int]
  case object Set extends Effect[(String, Int), Nothing, Unit]
  case object Reset extends Effect[Unit, Nothing, Unit]
  case object Io extends Effect[Unit, String, Long]
  case object Task extends Effect[Unit, Throwable, Long]
  case object Uio extends Effect[Unit, Nothing, Long]
  case object Urio extends Effect[Unit, Nothing, Long]
  case object Poly1 extends Poly.Effect.Input[Nothing, Unit]
  case object Poly2 extends Poly.Effect.Error[Unit, Unit]
  case object Poly3 extends Poly.Effect.Output[Unit, Nothing]
  case object Poly4 extends Poly.Effect.InputError[Unit]
  case object Poly5 extends Poly.Effect.InputOutput[Unit]
  case object Poly6 extends Poly.Effect.ErrorOutput[Unit]
  case object Poly7 extends Poly.Effect.InputErrorOutput
  case object Poly8 extends Poly.Effect.Output[Unit, Nothing]
  case object Poly9 extends Poly.Effect.Output[Unit, Nothing]
  case object Poly10 extends Poly.Effect.InputOutput[Nothing]
  override val compose: URLayer[mock.Proxy, Service] = ZLayer.fromZIO[mock.Proxy, Nothing, Service](
    ZIO.service[mock.Proxy].flatMap { proxy =>
      withRuntime[mock.Proxy, Service] { rt =>
        class MockImpl extends Service {
          final override def get(key: String): ZIO[Any, Nothing, Int] = proxy(Get, key)
          final override def set(key: String, value: Int): ZIO[Any, Nothing, Unit] = proxy(Set, key, value)
          final override def reset: ZIO[Any, Nothing, Unit] = proxy(Reset)
          final override def io: ZIO[Any, String, Long] = proxy(Io)
          final override def task: ZIO[Any, Throwable, Long] = proxy(Task)
          final override def uio: ZIO[Any, Nothing, Long] = proxy(Uio)
          final override def urio: ZIO[String, Nothing, Long] = proxy(Urio)
          final override def poly1[A](a: A)(using EnvironmentTag[A]): ZIO[Any, Nothing, Unit] = proxy(Poly1.of[A], a)
          final override def poly2[A](using EnvironmentTag[A]): ZIO[Any, A, Unit] = proxy(Poly2.of[A])
          final override def poly3[A](using EnvironmentTag[A]): ZIO[Any, Nothing, A] = proxy(Poly3.of[A])
          final override def poly4[A, B](a: A)(using EnvironmentTag[A], EnvironmentTag[B]): ZIO[Any, B, Unit] = proxy(Poly4.of[A, B], a)
          final override def poly5[A, B](a: A)(using EnvironmentTag[A], EnvironmentTag[B]): ZIO[Any, Unit, B] = proxy(Poly5.of[A, B], a)
          final override def poly6[A, B](using EnvironmentTag[A], EnvironmentTag[B]): ZIO[Any, A, B] = proxy(Poly6.of[A, B])
          final override def poly7[A, B, C](a: A)(using EnvironmentTag[A], EnvironmentTag[B], EnvironmentTag[C]): ZIO[Any, B, C] = proxy(Poly7.of[A, B, C], a)
          final override def poly8[A](using EnvironmentTag[A]): ZIO[Any, Nothing, Tuple2[A, String]] = proxy(Poly8.of[Tuple2[A, String]])
          final override def poly9[A <: Foo](using EnvironmentTag[A]): ZIO[Any, Nothing, A] = proxy(Poly9.of[A])
          final override def poly10[A](a: Wrapped[A])(using EnvironmentTag[A]): ZIO[Any, Nothing, A] = proxy(Poly10.of[Wrapped[A], A], a)
        }
        ZIO.succeed(new MockImpl())
  }})
  // format: on
}

object TestBasic {
  implicitly[ServiceMock.type <:< Mock[Service]]
  implicitly[ServiceMock.Get.type <:< ServiceMock.Effect[String, Nothing, Int]]
  implicitly[ServiceMock.Set.type <:< ServiceMock.Effect[(String, Int), Nothing, Unit]]
  implicitly[ServiceMock.Reset.type <:< ServiceMock.Effect[Unit, Nothing, Unit]]
  implicitly[ServiceMock.Io.type <:< ServiceMock.Effect[Unit, String, Long]]
  implicitly[ServiceMock.Task.type <:< ServiceMock.Effect[Unit, Throwable, Long]]
  implicitly[ServiceMock.Uio.type <:< ServiceMock.Effect[Unit, Nothing, Long]]
  implicitly[ServiceMock.Urio.type <:< ServiceMock.Effect[Unit, Nothing, Long]]
  implicitly[ServiceMock.Poly1.type <:< ServiceMock.Poly.Effect.Input[Nothing, Unit]]
  implicitly[ServiceMock.Poly2.type <:< ServiceMock.Poly.Effect.Error[Unit, Unit]]
  implicitly[ServiceMock.Poly3.type <:< ServiceMock.Poly.Effect.Output[Unit, Nothing]]
  implicitly[ServiceMock.Poly4.type <:< ServiceMock.Poly.Effect.InputError[Unit]]
  implicitly[ServiceMock.Poly5.type <:< ServiceMock.Poly.Effect.InputOutput[Unit]]
  implicitly[ServiceMock.Poly6.type <:< ServiceMock.Poly.Effect.ErrorOutput[Unit]]
  implicitly[ServiceMock.Poly7.type <:< ServiceMock.Poly.Effect.InputErrorOutput]
  implicitly[ServiceMock.Poly8.type <:< ServiceMock.Poly.Effect.Output[Unit, Nothing]]
  implicitly[ServiceMock.Poly9.type <:< ServiceMock.Poly.Effect.Output[Unit, Nothing]]
  implicitly[ServiceMock.Poly10.type <:< ServiceMock.Poly.Effect.InputOutput[Nothing]]
}
